0.8版本之前
kill -HUP pid，是告诉nginx，从容地重启nginx，我们一般用这个信号来重启nginx，或重新加载配置，因为是从容地重启，因此服务是不中断的。
master 接受HUP信号
	1.先重新加载配置文件。
	2.再启动新的worker进程，并向所有老的worker进程发送信号，告诉他们可以停止活动。
	3.新的worker在启动后，就开始接收新的请求，而老的worker在收到来自master的信号后，就不再接收新的请求，并且在当前进程中的所有未处理完的请求处理完成后，再退出

	
0.8版本之后
./nginx -s reload 	就是来重启nginx，
	执行命令时，我们是启动一个新的nginx进程，而新的nginx进程在解析到reload参数后，就知道我们的目的是控制nginx来重新加载配置文件了，它会向master进程发送信号
./nginx -s stop 	就是来停止nginx的运行。


accept_mutex的意义：
当一个新连接到达时，如果激活了accept_mutex，那么多个Worker将以串行方式来处理，其中有一个Worker会被唤醒，其他的Worker继续保持休眠状态；
			  如果没有激活accept_mutex，那么所有的Worker都会被唤醒，不过只有一个Worker能获取新连接，其它的Worker会重新进入休眠状态，这就是「惊群问题」。
			  
			  
注释：
在linux的网络编程中，很长的时间都在使用select来做事件触发。在linux新的内核中，有了一种替换它的机制，就是epoll。
相比于select，epoll最大的好处在于它不会随着监听fd数目的增长而降低效率。因为在内核中的select实现中，它是采用轮询来处理的，轮询的fd数目越多，自然耗时越多。并且，在linux/posix_types.h头文件有这样的声明：
	#define __FD_SETSIZE 1024
	表示select最多同时监听1024个fd，当然，可以通过修改头文件再重编译内核来扩大这个数目，但这似乎并不治本。
epoll的接口非常简单，一共就三个函数：

1.int epoll_create(int size)
创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大。这个参数不同于select()中的第一个参数，给出最大监听的fd+1的值。需要注意的是，当创建好epoll句柄后，它就是会占用一个fd值，在linux下如果查看/proc/进程id/fd/，是能够看到这个fd的，所以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽。
自从Linux 2.6.8开始，size参数被忽略，但是依然要大于0。

2.int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)
epoll的事件注册函数，它不同与select()是在监听事件时告诉内核要监听什么类型的事件，而是在这里先注册要监听的事件类型。第一个参数是epoll_create()的返回值，第二个参数表示动作，用三个宏来表示：

3.int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout)
等待事件的产生，类似于select()调用。参数events用来从内核得到事件的集合，maxevents表示每次能处理的最大事件数，告之内核这个events有多大，这个maxevents的值不能大于创建epoll_create()时的size，参数timeout是超时时间（毫秒，0会立即返回，-1将不确定，也有说法说是永久阻塞）。该函数返回需要处理的事件数目，如返回0表示已超时。

高版本的Linux中，accept不存在惊群问题，不过epoll_wait等操作还有。
Nginx缺省激活了accept_mutex，是一种保守的选择。如果关闭了它，可能会引起一定程度的惊群问题，表现为上下文切换增多（sar -w）或者负载上升，但是如果你的网站访问量比较大，为了系统的吞吐量，我还是建议大家关闭它。


nginx采用了异步非阻塞的方式来处理请求

nginx为提高效率，采用状态机来解析请求行，而且在进行method的比较时，没有直接使用字符串比较，而是将四个字符转换成一个整型，然后一次比较以减少cpu的指令数



Linux 下Nginx操作
1.从容停止
	查看进程   ps -ef|grep nginx
	杀死进程   kill -QUIT "进程号"
2.快速停止
	查看进程  ps -ef|grep nginx
	杀死进程  kill -TERM XXX 或者  kill -INT XXX
3.强制停止
	pkill -9 nginx

验证nginx配置文件是否正确
方法一：进入nginx安装目录sbin下，输入命令./nginx -t
	[root@localhost sbin]# ./nginx -t
	nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok
	nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful
	表示配置文件正确

重启
方法一. 进入nginx安装目录sbin下，输入命令./nginx -s reload	
方法二. 查看进程  ps -ef|grep nginx
	  kill -HUP 进程号
	  

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
